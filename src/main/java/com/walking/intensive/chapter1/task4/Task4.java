package com.walking.intensive.chapter1.task4;

/**
 * Дано уравнение:
 *
 * <p>ax² + bx + c = 0
 *
 * <p>Реализуйте метод solveEquation(), который параметрами принимает
 * коэффициенты - вещественные числа a, b и c.
 *
 * <p>Метод должен возвращать в виде строки количество решений, а также сами решения в указанном ниже формате:
 * <ul>
 * <li> "Количество решений: 2. Корни: -4;4"
 * <li> "Количество решений: 1. Корень: 0"
 * <li> "Количество решений: 0."
 * <li> "Бесконечное множество решений."
 * </ul>
 *
 * <p>Обратите внимание, что если корней уравнения два - они должны располагаться по возрастанию.
 *
 * <p>P.S. Квадратные уравнения решаются либо через теорему Виета, либо через дискриминант.
 *
 * <p><a href="https://github.com/KFalcon2022/intensive-tasks-2024/blob/master/README.md">Требования к оформлению</a>
 */
public class Task4 {
    public static void main(String[] args) {
//        Для собственных проверок можете делать любые изменения в этом методе
        double a = 1;
        double b = 0;
        double c = 0;

        System.out.println(solveEquation(a, b, c));

    }

    static String solveEquation(double a, double b, double c) {
        //        Место для вашего кода
// ax² + bx + c = 0
// Формула дискриминанта D = b^b - 4ac
        String outputString = "";
        double discriminant = b * b - 4 * a * c;
        double x;
        double x1, x2;
//Дальше смотрим чему равен дискриминант
 /*
         Если больше 0 то для нахождения корней используем формулы для x1 и x2
                x1 = -b + корень из D / 2a
                x2 = -b - корень из D / 2a
        Если дискриминант равен 0 - одно решение
                x = -b / 2a
        Если дискриминант меньше 0 то корней нет

        Бесконечное множество решений возможно только если все коэффициенты равны 0
 */
        if (a == 0 && b == 0 && c == 0) {
            outputString = "Бесконечное множество решений.";
            return outputString;
        }

//      По определению a != 0
        if (discriminant > 0 && a != 0) {

            String endString;


            x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
            x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
            if (x1 < x2) {
                endString = x1 + ";" + x2;
            } else {
                endString = x2 + ";" + x1;
            }
            outputString = "Количество решений: 2. Корни: " + endString;

        }

        if (discriminant == 0) {

            if (b == 0 && a == 0) {
//  Тогда с = 0
                outputString = "Количество решений: 0.";
                return outputString;
            }

            x = -b / (2 * a);

//        Не знаю почему, но вместо обычного 0 программа возвращает в печать отрицательный 0 т.е. (-0.0)
//        возможно из-за приведения типа к строке?
//        поэтому возвращаем положительный???? 0
            if (x == 0) {
                x = 0;
            }

            outputString = "Количество решений: 1. Корень: " + x;
        }

        if (discriminant < 0) {
            outputString = "Количество решений: 0.";
        }

//    Если a равно 0, то это уже не квадратное уравнение, линейное bx+c =0
        if (a == 0) {

            x = -c / b;

            outputString = "Количество решений: 1. Корень: " + x;
        }


        return outputString;

    }
}
